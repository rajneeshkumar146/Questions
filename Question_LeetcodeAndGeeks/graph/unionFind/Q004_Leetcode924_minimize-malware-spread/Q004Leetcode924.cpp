// #include <bits/stdc++.h>
#include <iostream>
#include <vector>
#include <string>

using namespace std;

vector<int> par;
int find(int u)
{
    return par[u] == u ? u : par[u] = find(par[u]);
}

int minMalwareSpread(vector<vector<int>> &graph, vector<int> &initial)
{
    int n = graph.size();
    for (int i = 0; i < n; i++)
        par.push_back(i);

    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            if (i != j && graph[i][j] == 1)
                par[find(i)] = find(j); //union two set, cycle dosent matter here so we didn't check just merge two set.

    vector<int> IPC(n, 0); //infected patient count
    vector<int> POC(n, 0); //population of country

    sort(initial.begin(), initial.end());
    int ans = initial[0];
    for (int patient : initial) // set leader will store how many infected patient the have and size of set.
        IPC[find(patient)]++;
    for (int i = 0; i < n; i++)
        POC[find(i)]++;

    int maxPopulation = 0;
    for (int patient : initial) // iterate over leaders and ask them how many infected patient they have.
    {
        if (IPC[par[patient]] == 1 && POC[par[patient]] > maxPopulation)
        {
            maxPopulation = POC[par[patient]];
            ans = patient;
        }
    }

    return ans;
}