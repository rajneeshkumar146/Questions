// #include <bits/stdc++.h>
#include <iostream>
#include <vector>
#include <string>

#define vi vector<int>
#define vii vector<vi>
using namespace std;

vector<int> size;
vector<int> par;

int find(int u)
{
    if (par[u] == u)
        return u;
    par[u] = find(par[u]);
    return par[u];
}

void merge(int u, int v)
{
    if (size[u] < size[v])
    {
        par[u] = par[v];
        size[v] += size[u];
    }
    else
    {
        par[v] = par[u];
        size[u] += size[v];
    }
}

int minMalwareSpread(vector<vector<int>> &graph, vector<int> &initial)
{
    for (int i = 0; i <= graph.size(); i++)
    {
        par.push_back(i);
        size.push_back(1);
    }

    for (int i = 0; i < graph.size(); i++)
    {
        for (int j = 0; j < graph[0].size(); j++)
        {
            if (i != j && graph[i][j] == 1)
            {
                int u = find(i);
                int v = find(j);
                if (u != v)
                    merge(u, v);
            }
        }
    }

    sort(initial.begin(), initial.end());
    int idx = 0;
    int max_size = -1;
    for (int ele : initial)
    {
        int size_ = size[par[ele]];
        if (max_size < size_)
        {
            max_size = size_;
            idx = ele;
        }
    }

    return idx;
}

void solve()
{
}
int main()
{
    solve();
    return 0;
}
