import java.util.*;
class Solution {
    int[] low,dis;
    boolean[] infected;
    int time = 1;
    int[] count;
    public int dfs(int src,int par,int[][] graph){
        dis[src] = low[src] = time++;
        int size = 1;
        boolean isVtxInfected = infected[src];
        
        for(int v = 0; v < graph[src].length;v++){
            if(graph[src][v] == 1 && src != v){
                if(dis[v] == 0){
                    int s = dfs(v,src,graph);
                    if(s == 0) 
                        isVtxInfected = true;
                    else 
                        size += s;
                    
                if(dis[src] <= low[v]) {
                    count[src] += s;
                }
                   low[src] = Math.min(low[src],low[v]);
            }else if(src != par){
                    low[src] = Math.min(low[src],dis[v]);
            }
           }
        }
            
            return isVtxInfected ? 0 : size;
    }
    
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        low = new int[n];
        dis = new int[n];
        count = new int[n];
        infected = new boolean[n];
        int max = -1;
        for(int i : initial) infected[i] = true;
        Arrays.sort(initial);
        
        int vtx = -1;
        for(int i : initial){
            if(dis[i] == 0)
                dfs(i,-1,graph);
            
            if(count[i] > max)
            {
                max = count[i];
                vtx = i;
            }
        }
       
        return vtx;
    }
}